// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/PacktPublishing/Hands-On-Software-Engineering-with-Golang/ch04/dependency (interfaces: API)

// Package mock_dependency is a generated GoMock package.
package mock_dependency

import (
	dependency "github.com/PacktPublishing/Hands-On-Software-Engineering-with-Golang/ch04/dependency"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAPI is a mock of API interface
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// DependencyType mocks base method
func (m *MockAPI) DependencyType(arg0 string) (dependency.DepType, error) {
	ret := m.ctrl.Call(m, "DependencyType", arg0)
	ret0, _ := ret[0].(dependency.DepType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DependencyType indicates an expected call of DependencyType
func (mr *MockAPIMockRecorder) DependencyType(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DependencyType", reflect.TypeOf((*MockAPI)(nil).DependencyType), arg0)
}

// ListDependencies mocks base method
func (m *MockAPI) ListDependencies(arg0 string) ([]string, error) {
	ret := m.ctrl.Call(m, "ListDependencies", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDependencies indicates an expected call of ListDependencies
func (mr *MockAPIMockRecorder) ListDependencies(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDependencies", reflect.TypeOf((*MockAPI)(nil).ListDependencies), arg0)
}
